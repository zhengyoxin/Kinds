apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

dependencies {
    compile 'com.google.auto.service:auto-service:1.0-rc2'
    compile 'com.squareup:javapoet:1.10.0'
    compile project(':kinds-annotation')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Fixed when use 'gradle release', other project can't fetch lib because there still
// depend old version
ext.orgVersion = "${version}"
project.afterEvaluate {
    def gradleProperties = new File(project.rootDir, "gradle.properties")
    if (gradleProperties.exists()) {
        Properties properties = new Properties()
        gradleProperties.withInputStream {
            instr -> properties.load(instr)
        }
        ext.orgVersion = properties.getProperty('version')
    }
}
jar.doLast { j ->
    def orgVersion = project.ext.orgVersion
    File targetFile = new File(j.archivePath.parentFile, "${j.baseName}-${orgVersion}.jar")
    if (!targetFile.exists()) {
        project.copy {
            from j.archivePath.parentFile
            into j.archivePath.parentFile
            include j.archivePath.name
            rename j.archivePath.name, targetFile.name
        }
    }
}

apply from: '../publish_java.gradle'

publishing {

    publications {
        maven(MavenPublication) {
            version "${version}"
            groupId 'com.yy.mobile'
            artifactId 'kinds-compiler'
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            artifact androidSourcesJar

            pom.withXml {
                //Creating additional node for dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                def configurationNames = ['compile']

                configurationNames.each { configurationName ->
                    configurations[configurationName].allDependencies.each {
                        if (it.group != null && it.name != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)

                            //If there are any exclusions in dependency
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }

    }
}