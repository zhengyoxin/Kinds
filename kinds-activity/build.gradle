apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kinds-register'
apply plugin: 'maven'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

android.libraryVariants

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation ('com.android.support:appcompat-v7:26.1.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    api("com.github.zhengyoxin:MultiVLayout:0.1.0") {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    api project(':kinds-annotation')
//    annotationProcessor project(':features-compiler')

    api ('com.android.support:support-annotations:26.1.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            version "${version}"
            groupId 'com.yy.mobile'
            artifactId 'kinds-activity'
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
//            artifact pluginJar

            pom.withXml {
                //Creating additional node for dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                def configurationNames = ['compile']

                configurationNames.each { configurationName ->
                    configurations[configurationName].allDependencies.each {
                        if (it.group != null && it.name != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)

                            //If there are any exclusions in dependency
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

publish.dependsOn build
publishToMavenLocal.dependsOn build